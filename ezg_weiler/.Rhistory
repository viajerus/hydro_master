facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1
panel_labels <- c("Messwert_diclofenac" = "Diclofenac  mu*g/l", "Messwert_calcium" = "Calcium")
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1
panel_labels <- c("Messwert_diclofenac" = "Diclofenac  \mu g/l", "Messwert_calcium" = "Calcium")
panel_labels <- c("Messwert_diclofenac" = "Diclofenac  $\mu g/l", "Messwert_calcium" = "Calcium")
panel_labels <- c("Messwert_diclofenac" = expression(paste("Diclofenac ", mu, "g/l")),
"Messwert_calcium" = "Calcium")
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1
panel_labels <- c("Messwert_diclofenac" = expression(paste("Diclofenac ", mu, "g/l")),
"Messwert_calcium" = "Calcium")
panel_labels <- c("Messwert_diclofenac" = expression(paste("Diclofenac ", mu, "g/l")),
"Messwert_calcium" = "Calcium")
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = parse(text = panel_labels))) +
labs(title = "Lines with Custom Facet Labels")
p1
panel_labels <- c("Messwert_diclofenac" = "Diclofenac µg/l", "Messwert_calcium" = "Calcium")
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1
panel_labels <- c("Messwert_diclofenac" = "Diclofenac µg/l", "Messwert_calcium" = "Calcium mg/l")
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels", xlab = "Datum")
p
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels", xlab = "Datum")
p1
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels") + xlab = "Datum"
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
xlab = "dateee"
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
xlab = "dateee" +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
xlab("Datum") +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
xlab("Datum") + ylab ("Messwerte")
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
xlab("Datum") + ylab ("Messwerte") +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
labs(title = "Lines with Custom Facet Labels")
p1
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
xlab("Datum") + ylab ("Messwerte") +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels))
p1
p2 <- ggplot(df_neckar, aes(date, Value)) +
geom_line()
combined_plot <- p1 / p2
combined_plot
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
xlab("Datum") + ylab ("Messwerte") +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
theme(axis.title.x=element_blank())
p1
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
xlab("Datum") + ylab ("Messwerte") +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
theme(axis.title.x=element_blank())
p1
p2 <- ggplot(df_neckar, aes(date, Value)) +
geom_line()
combined_plot <- p1 / p2
combined_plot
p2 <- ggplot(df_neckar, aes(date, Value)) +
xlab("Datum") + ylab ("Messwerte") +
geom_line()
combined_plot <- p1 / p2
combined_plot
p1 <- ggplot(mdata, aes(date, value)) +
geom_point() +
ylab ("Messwerte") +
facet_wrap(~variable, scales = "free_y", ncol = 1, labeller = labeller(variable = panel_labels)) +
theme(axis.title.x=element_blank())
p1
p2 <- ggplot(df_neckar, aes(date, Value)) +
xlab("Datum") + ylab ("Mittlerer Tagesabfluss (Q)") +
geom_line()
combined_plot <- p1 / p2
combined_plot
library(gt)
ggplot(data=clean)+
geom_ellipse(
aes(x0=x0,y0=y0,a=a0,b=b0,angle=0),
color=NA,fill="black"
)+
geom_richtext(
aes(x=x0+1, y=y0-0.15, label = label),
hjust=0,vjust=1,size=8,family='barlow',lineheight=0.4,
fill = NA, label.color = NA, # remove background and outline
label.padding = grid::unit(rep(0, 4), "pt") # remove padding
) +
geom_ellipse(
aes(x0=x1,y0=y1,a=a1,b=b1,angle=0),
color=NA,fill="black"
)+
geom_ellipse(
aes(x0=x2,y0=y2,a=a2,b=b2,angle=0),
color=NA,fill="black"
)+
geom_ellipse(
aes(x0=x3,y0=y3,a=a3,b=b3,angle=0),
color=NA,fill="black"
)+
geom_ellipse(
aes(x0=x4,y0=y4,a=a4,b=b4,angle=0),
color=NA,fill="black"
)+
geom_text(
data=legend_number,aes(x=x0,y=y0),
label="a.",family='barlow',size=8,hjust=0.5,
vjust=0.5,color="white"
)+
geom_text(
data=legend_number,aes(x=x1-1.5,y=y1+0.1),
label="b.",family='barlow',size=8,hjust=0
)+
geom_text(
data=legend_number,aes(x=x2-0.75,y=y2+0.1),
label="c.",family='barlow',size=8,hjust=0
)+
geom_text(
data=legend_number,aes(x=x3,y=y3+0.1),
label="d.",family='barlow',size=8,hjust=0
)+
geom_text(
data=legend_number,aes(x=x4+0.75,y=y4+0.1),
label="e.",family='barlow',size=8,hjust=0
)+
annotate(
geom="text",x=178,y=2.5,label="Legend",size=11,family='barlow',
fontface='bold',vjust=1,hjust=0
)+
annotate(
geom="text",x=178,y=2.35,size=9,family='barlow',vjust=1,hjust=0,
label="a. Overall grade (among 13 traits)"
)+
annotate(
geom="text",x=178,y=2.2,size=9,family='barlow',vjust=1,hjust=0,
label="b. Affectionate with family"
)+
annotate(
geom="text",x=195,y=2.5,size=9,family='barlow',vjust=1,hjust=0,
label="c. Good with children"
)+
annotate(
geom="text",x=195,y=2.35,size=9,family='barlow',vjust=1,hjust=0,
label="d. Good with other dogs"
)+
annotate(
geom="text",x=195,y=2.2,size=9,family='barlow',vjust=1,hjust=0,
label="e. Watchdog"
)+
annotate("segment", x = 142, xend = 152, y = 2.2, yend = 2.2,
colour = "black", size = 0.5, arrow = arrow(length=unit(3.5, "mm"))) +
annotate("segment", x = 142, xend = 142, y = 2.2, yend = 3.0,
colour = "black", size = 0.5, arrow = arrow(length=unit(3.5, "mm"))) +
annotate(
geom="text",x=146,y=2.10,size=9,family='barlow',vjust=1,hjust=0.5,
label="Popularity ranking"
)+
annotate(
geom="text",x=140,y=2.5,size=9,family='barlow',vjust=1,hjust=0.5,
label="Overall grade",angle=90
)+
annotate(
geom="text",x=140,y=4.7,size=16,family='oswald',vjust=1,hjust=0,
label="Popular dog breeds are not always the best rated",fontface="bold"
)+
geom_richtext(
data=cap,
aes(x=x, y=y, label = label),
hjust=0,vjust=1,size=9,family='barlow',
fill = NA, label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt")
) +
scale_x_continuous(limits = c(135,205))+
scale_y_continuous(limits = c(2,5))+
theme_void()+
theme(
plot.background = element_rect(fill="white",color="black")
)
library(tidyverse)
library(ggforce)
install.packages("ggforce")
install.packages("ggtext")
install.packages("camcorder")
install.packages("showtext")
library(tidyverse)
library(ggforce)
library(ggtext)
library(camcorder)
library(showtext)
# Get the Data
breed_traits <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-01/breed_traits.csv')
trait_description <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-01/trait_description.csv')
#breed_rank_all <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-01/breed_rank_all.csv')
breed_rank_all <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-02-01/breed_rank.csv')
View(breed_traits)
# Load fonts
font_add_google("Barlow Condensed","barlow")
font_add_google("Oswald","oswald")
# Automatically use {showtext} for plots
showtext_auto()
# Set plot size
gg_record(
dir = file.path(tempdir(),"recording"),
device = "png",
width = 10*1.618,
height = 10,
units = "cm",
dpi = 300
)
data<-breed_traits%>%
#filter(str_detect(Breed,"Labrador"))%>%
select(
Breed,
Family='Affectionate With Family',
Children='Good With Young Children',
Dogs='Good With Other Dogs',
Shedding='Shedding Level',
Coat='Coat Grooming Frequency',
Drooling='Drooling Level',
Strangers='Openness To Strangers',
Watchdog='Watchdog/Protective Nature',
Adaptability='Adaptability Level',
Trainability='Trainability Level',
Energy='Energy Level',
Barking='Barking Level',
Mental='Mental Stimulation Needs'
)
overall<-rowMeans(data[2:14])
data<-data%>%
bind_cols(Overall=overall)
rank<-breed_rank_all%>%
select(br=Breed,Rank='2020 Rank')
data<-data%>%
bind_cols(rank)
min_grade<-data[1:50,]%>%
mutate(min_grade=min)
data<-breed_traits%>%
#filter(str_detect(Breed,"Labrador"))%>%
select(
Breed,
Family='Affectionate With Family',
Children='Good With Young Children',
Dogs='Good With Other Dogs',
Shedding='Shedding Level',
Coat='Coat Grooming Frequency',
Drooling='Drooling Level',
Strangers='Openness To Strangers',
Watchdog='Watchdog/Protective Nature',
Adaptability='Adaptability Level',
Trainability='Trainability Level',
Energy='Energy Level',
Barking='Barking Level',
Mental='Mental Stimulation Needs'
)
overall<-rowMeans(data[2:14])
data<-data%>%
bind_cols(Overall=overall)
rank<-breed_rank_all%>%
select(br=Breed,Rank='2020 Rank')
data<-data%>%
bind_cols(rank)
min_grade<-data[1:50,]%>%
mutate(min_grade=min)
View(data)
overall<-rowMeans(data[2:14])
data<-data%>%
bind_cols(Overall=overall)
rank<-breed_rank_all%>%
select(br=Breed,Rank='2020 Rank')
data<-data%>%
bind_cols(rank)
min_grade<-data[1:50,]%>%
dplyr::mutate(min_grade=min)
min_grade<-data[1:50,]%>%
dplyr::mutate(min_grade=min, as.numeric)
overall<-rowMeans(data[2:14])
data<-data%>%
bind_cols(Overall=overall)
rank<-breed_rank_all%>%
select(br=Breed,Rank='2020 Rank')
data<-data%>%
bind_cols(rank)
min_grade<-data[1:50,]%>%
mutate(min_grade=min)
rlang::last_trace()
data[1:50,]
library(tidyverse)
library(tidyverse)
library(camcorder)
library(showtext)
library(ggtext)
# Plot size
gg_record(
dir = file.path(tempdir(),"recording"),
device = "png",
width = 21,
height = 29.7,
units = "cm",
dpi = 300
)
# Fonts
font_add_google("Oswald","oswald")
font_add_google("Open Sans","open")
font_add_google("Bree Serif","bree")
font_add_google("Patua One","patua")
font_add_google("Francois One","fran")
showtext_auto()
# Color
tex <- '#070707'
col_send <- '#FA8334'
col_rec <- '#42047E'
# Load data
erasmus <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-03-08/erasmus.csv')
# Country names
iso<-read_delim("https://raw.githubusercontent.com/BjnNowak/TidyTuesday/main/data/iso.csv",delim=';')
# Prep data
send <- erasmus%>%
mutate(ct=1)%>%
group_by(sending_country_code,academic_year)%>%
summarize(sending=sum(na.omit(participants)))%>%
left_join(iso,by=c("sending_country_code"="code"))
rec <- erasmus%>%
mutate(ct=1)%>%
group_by(receiving_country_code,academic_year)%>%
summarize(receiving=sum(na.omit(participants)))%>%
left_join(iso,by=c("receiving_country_code"="code"))
View(erasmus)
data <- send%>%
left_join(rec)%>%
mutate(sending2=-sending)%>%
group_by(country_name)%>%
mutate(
receiving_all=sum(na.omit(receiving)),
sending_all=sum(na.omit(sending))
)%>%
filter(
receiving_all>500
)%>%
filter(country_name!='NA')%>%
ungroup()
resume <- data%>%
group_by(country_name)%>%
summarize(
mean_rec=mean(na.omit(receiving)),
receiving_all=mean(na.omit(receiving_all)),
mean_send=mean(na.omit(sending))
)
# Make plot
tit <- tibble(
y='Ireland',
x=-8000,
label="Student\nexchanges\nin Europe"
)
sub <- tibble(
y='Ireland',
x=-8000,
label=
'Country ranking based on a\n
sample of Erasmus programs.\n
Bars show the annual average\n
for the period, points show\n
the values for each year. '
)
out <- tibble(
y='Ireland',
x=-6500,
label=
'Outgoing\nstudents'
)
inc <- tibble(
y='Ireland',
x=6000,
label=
'Incoming\nstudents'
)
# Custom caption
caption <- tibble(
x=-8000,
y='Iceland',
lab="**Data:** Data.Europa **| Plot:** @BjnNowak ",
color="black"
)
ggplot(data,aes(y=fct_reorder(country_name,receiving_all),alpha=academic_year))+
geom_text(
tit,mapping=aes(x=x,label=label),
y='Ireland',inherit.aes = FALSE,
size=32, family='patua',hjust=0,lineheight=0.40,vjust=0
)+
geom_text(
sub,mapping=aes(x=x,label=label),
y='Cyprus',inherit.aes = FALSE,
size=14, family='open',hjust=0,lineheight=0.25,vjust=1
)+
geom_richtext(
caption,mapping=aes(x=x,label=lab),
y='Iceland',inherit.aes = FALSE,
size=12, family='open',hjust=0,lineheight=0.25,vjust=1,
fill = NA, label.color = NA,
label.padding = grid::unit(rep(0, 4), "pt")
)+
geom_text(
out,mapping=aes(x=x,label=label),
y='Hungary',inherit.aes = FALSE,
size=20, family='fran',lineheight=0.40,vjust=0.5,col=col_send,hjust=0.5
)+
geom_text(
inc,mapping=aes(x=x,label=label),
y='Hungary',inherit.aes = FALSE,
size=20, family='fran',lineheight=0.40,vjust=0.5,col=col_rec,hjust=0.5
)+
geom_segment(
data=resume,
aes(y=fct_reorder(country_name,receiving_all),yend=fct_reorder(country_name,receiving_all),
x=0,xend=mean_rec
),
size=9,
col=col_rec,alpha=0.15,
inherit.aes = FALSE
)+
geom_segment(
data=resume,
aes(y=fct_reorder(country_name,receiving_all),yend=fct_reorder(country_name,receiving_all),
x=0,xend=-mean_send
),
size=9,
col=col_send,alpha=0.15,
inherit.aes = FALSE
)+
geom_jitter(aes(x=receiving),size=3,height = 0.25,color=col_rec)+
geom_jitter(aes(x=-sending),size=3,height = 0.25,color=col_send)+
geom_text(
data=data%>%group_by(country_name)%>%summarize(receiving_all=mean(receiving_all)),
aes(y=fct_reorder(country_name,receiving_all),label=country_name),
x=0,color=tex,alpha=0.5,size=15,family='oswald'
)+
scale_x_continuous(
limits=c(-8000,8000),
position = "top",
breaks=c(-6000,-3000,3000,6000),
labels=c('6,000','3,000','3,000','6,000')
)+
guides(
color='none',
alpha=guide_legend(
range=c(0.3, 1),
override.aes = list(color='black'),
title='Academic\nyear')
)+
labs(
x="Number of students",
alpha="Academic\nyear"
)+
theme_void()+
theme(
plot.background = element_rect(fill="#FAF0F0",color=NA),
axis.text.x = element_text(size=35,family='open'),
axis.title.x = element_text(size=45,family='fran',face='bold',margin=margin(0.2,0.2,0.2,0.2, unit = "cm")),
plot.margin = margin(1,1,1,1, unit = "cm"),
legend.position=c(0.85,0.15),
legend.text = element_text(family='open',size=35,margin = margin(0,0,0,0, unit = "cm")),
legend.title = element_text(family='fran',size=45,hjust=0.5,lineheight=0.35,face='bold',margin = margin(0,0,0,0, unit = "cm")),
legend.spacing.x = unit(0, "cm"),
legend.spacing.y = unit(0.25, "cm")
)
