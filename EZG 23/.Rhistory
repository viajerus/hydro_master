}
for (i in 1:length(events)) {
#i <- 1
print(x)
}
for (i in 1:length(events)) {
#i <- 1
print(i)
}
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert)
}
View(new_test)
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert)
event <- xts(x = new_test, order.by = new_test$date)
event1$date <- NULL
event1$baseflow <- baseflow(event1$Wert)
}
result_data <- data.frame()
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert)
event <- xts(x = new_test, order.by = new_test$date)
event1$date <- NULL
event1$baseflow <- baseflow(event1$Wert)
result_data <- bind_rows(result_data, event1)
}
View(result_data)
result_data <- data.frame()
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
result_data <- bind_rows(result_data, event)
}
View(result_data)
emptyxts(cnames = NULL, nc = 1, rowfill = NA,
order.by = index(xts_data["2014", ]))
result_data <- data.frame()
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df = data.frame(date=index(event), coredata(event))
result_data <- bind_rows(result_data, df)
}
View(result_data)
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert, N)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df = data.frame(date=index(event), coredata(event))
result_data <- bind_rows(result_data, df)
}
View(workdat)
View(new)
events <- dplyr::pull(events.P, which.max)
rowRanges <- lapply(which(rownames(workdat) %in% events), function(x) x + c(-20:20))
filt <- lapply(rowRanges, function(x) workdat[x, ])
out <- do.call(rbind, filt)
new <-  do.call(rbind, Map(cbind, Name = seq_along(filt), filt))
View(new)
str(new)
new$Wert <- gsub(",", ".", new$Wert)
new$Wert <- as.numeric(new$Wert)
new$Wert <- new$Wert*1000*3600/62805000  #mm/hour
new_test <- new %>%
filter(Name == 1) %>%
select(date, Wert)
str(new)
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert, N)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df = data.frame(date=index(event), coredata(event))
result_data <- bind_rows(result_data, df)
}
View(df)
new_test <- new %>%
filter(Name == 1) %>%
select(date, Wert, N)
View(new_test)
event <- xts(x = new_test, order.by = new_test$date)
View(event)
event1$date <- NULL
event$date <- NULL
event$baseflow <- baseflow(event1$Wert)
result_data <- data.frame()
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert, N)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df = data.frame(date=index(event), coredata(event))
result_data <- bind_rows(result_data, df)
}
result_data <- data.frame()
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert, N)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df = data.frame(date=index(event), coredata(event))
result_data <- bind_rows(result_data, df)
}
View(result_data)
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert, N)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df <- data.frame(
event_number = rep(i, nrow(event)),  # New column with event number
date = index(event),
coredata(event)
)
result_data <- bind_rows(result_data, df)
}
View(result_data)
result_data <- data.frame()
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert, N)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df = data.frame(date=index(event), coredata(event))
result_data <- bind_rows(result_data, df)
}
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert, N)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df = data.frame(date=index(event), coredata(event))
result_data <- bind_rows(result_data, df)
print(rep(i))
}
result_data <- data.frame()
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert, N)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df = data.frame(date=index(event), coredata(event), event_number = rep(i))
result_data <- bind_rows(result_data, df)
}
events <- dplyr::pull(events.P, which.max)
rowRanges <- lapply(which(rownames(workdat) %in% events), function(x) x + c(-15:15))
filt <- lapply(rowRanges, function(x) workdat[x, ])
out <- do.call(rbind, filt)
new <-  do.call(rbind, Map(cbind, Name = seq_along(filt), filt))
new$Wert <- gsub(",", ".", new$Wert)
new$Wert <- as.numeric(new$Wert)
new$Wert <- new$Wert*1000*3600/62805000  #mm/hour
result_data <- data.frame()
for (i in 1:length(events)) {
#i <- 1
new_test <- new %>%
filter(Name == i) %>%
select(date, Wert, N)
event <- xts(x = new_test, order.by = new_test$date)
event$date <- NULL
event$baseflow <- baseflow(event$Wert)
df = data.frame(date=index(event), coredata(event), event_number = rep(i))
result_data <- bind_rows(result_data, df)
}
View(result_data)
library(ggplot2)
library(readxl)
library(tidyverse)
multi3420_1 <- read_excel("/Users/dabanto/Downloads/3420_1.xlsx")
View(multi3420_1)
multi3420_2 <- read_excel("/Users/dabanto/Downloads/3420_2.xlsx")
View(multi3420_2)
multi3420_1 <- multi3420_1 %>%
mutate(output = 0,0005031685*(`Cond [µS/cm]`) - 0,4512743753)
View(multi3420_1)
multi3420_1 <- read_excel("/Users/dabanto/Downloads/3420_1.xlsx")
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753)
multi3420_2 <- multi3420_2 %>%
mutate(output = 0.0005011327*(`Cond [µS/cm]`) - 0.4593158407)
str(multi3420_1)
library(lubridate)
hms(multi3420_1$Time)
multi3420_1$Time <- format(multi3420_1$Time,"%H:%M:%S")
View(multi3420_1)
multi3420_2$Time <- format(multi3420_2$Time,"%H:%M:%S")
hms(multi3420_2$Time)
multi3420_1 <- multi3420_1 %>%
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(date = make_datetime(Date, Time)
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(date = make_datetime(Date, Time)
multi3420_1 <- read_excel("/Users/dabanto/Downloads/3420_1.xlsx")
multi3420_2 <- read_excel("/Users/dabanto/Downloads/3420_2.xlsx")
multi3420_1$Time <- format(multi3420_1$Time,"%H:%M:%S")
multi3420_2$Time <- format(multi3420_2$Time,"%H:%M:%S")
multi3420_1 <- multi3420_1 %>%
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(date = make_datetime(Date, Time))
multi3420_1 <- multi3420_1 %>%
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(date = make_datetime(Date, hms(Time))
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(date = make_datetime(Date, hms(Time)))
rlang::last_trace()
View(nis)
as.POSIXct(multi3420_1$Date)
as.Date(multi3420_1$Date)
install.packages("anytime")
library(anytime)
anydate(multi3420_1$Date)
multi3420_1$Date <- anydate(multi3420_1$Date)
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(date = make_datetime(Date, hms(Time)))
View(multi3420_1)
multi3420_1 <- read_excel("/Users/dabanto/Downloads/3420_1.xlsx")
multi3420_1$Time <- format(multi3420_1$Time,"%H:%M:%S")
multi3420_1$Date <-
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(Date = anydate(multi3420_1$Date)) %>%
mutate(date_time = make_datetime(Date, Time))
anydate(multi3420_1$Time)
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(Date = anydate(multi3420_1$Date))
#mutate(date_time = make_datetime(Date, Time))
as.POSIXct(paste(multi3420_1$Date, multi3420_1$Time), format="%Y-%m-%d %H:%M:%S")
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(Date = anydate(multi3420_1$Date))
mutate(date_time = as.POSIXct(paste(multi3420_1$Date, multi3420_1$Time), format="%Y-%m-%d %H:%M:%S"))
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(Date = anydate(multi3420_1$Date)) %>%
mutate(date_time = as.POSIXct(paste(multi3420_1$Date, multi3420_1$Time), format="%Y-%m-%d %H:%M:%S"))
View(multi3420_1)
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(Time = format(Time,"%H:%M:%S")
mutate(Date = anydate(Date)) %>%
multi3420_1 <- read_excel("/Users/dabanto/Downloads/3420_1.xlsx")
multi3420_1 <- multi3420_1 %>%
multi3420_1 <- multi3420_1 %>%
mutate(output = 0.0005031685*(`Cond [µS/cm]`) - 0.4512743753) %>%
mutate(Time = format(Time,"%H:%M:%S")) %>%
mutate(Date = anydate(Date)) %>%
mutate(date_time = as.POSIXct(paste(Date, Time), format="%Y-%m-%d %H:%M:%S"))
View(multi3420_1)
multi3420_2 <- multi3420_2 %>%
mutate(output = 0.0005011327*(`Cond [µS/cm]`) - 0.4593158407) %>%
mutate(Time = format(Time,"%H:%M:%S")) %>%
mutate(Date = anydate(Date)) %>%
mutate(date_time = as.POSIXct(paste(Date, Time), format="%Y-%m-%d %H:%M:%S"))
multi3420_2 <- read_excel("/Users/dabanto/Downloads/3420_2.xlsx")
multi3420_2 <- multi3420_2 %>%
mutate(output = 0.0005011327*(`Cond [µS/cm]`) - 0.4593158407) %>%
mutate(Time = format(Time,"%H:%M:%S")) %>%
mutate(Date = anydate(Date)) %>%
mutate(date_time = as.POSIXct(paste(Date, Time), format="%Y-%m-%d %H:%M:%S"))
p <- ggplot(multi3420_1, aes(x=date_time, y=`Cond [µS/cm]`)) +
geom_line() +
xlab("")
p
p <- ggplot(multi3420_1, aes(x=date_time, y=`Cond [µS/cm]`)) +
geom_point() +
xlab("")
p
p <- ggplot(multi3420_1, aes(x=date_time, y=`Cond [µS/cm]`)) +
geom_line() +
xlab("")
p
p2 <- ggplot(multi3420_2, aes(x=date_time, y=`Cond [µS/cm]`)) +
geom_line() +
xlab("")
p2
p2 <- ggplot(multi3420_2, aes(x=date_time, y=output)) +
geom_line() +
xlab("")
p2
p1 <- ggplot(multi3420_1, aes(x=date_time, y=output)) +
geom_line() +
xlab("")
p1
library(ggplot2)
p1 <- ggplot(multi3420_1, aes(x=date_time, y=output)) +
geom_line() +
xlab("Salzkonzentation") +
xlab("")
p1
p1 <- ggplot(multi3420_1, aes(x=date_time, y=output)) +
geom_line() +
xlab("Salzkonzentation")
p1
p1 <- ggplot(multi3420_1, aes(x=date_time, y=output)) +
geom_line() +
ylab("Salzkonzentation")
p1
p2 <- ggplot(multi3420_2, aes(x=date_time, y=output)) +
geom_line() +
ylab("Salzkonzentation") +
ggtitle("Durchgangskurve 3420_2")
p2
p1 <- ggplot(multi3420_1, aes(x=date_time, y=output)) +
geom_line() +
ylab("Salzkonzentation") +
ggtitle("Durchgangskurve 3420_1")
p1
ggsave(p1, "/Users/dabanto/Desktop/master/hydro_master/tracerhydro/eichstetten/p1.png", dpi = 300)
p1 <- ggplot(multi3420_1, aes(x=date_time, y=output)) +
geom_line() +
ylab("Salzkonzentation") +
ggtitle("Durchgangskurve 3420_1")
p1
ggsave("/Users/dabanto/Desktop/master/hydro_master/tracerhydro/eichstetten/p1.png", p1,  dpi = 300)
p2 <- ggplot(multi3420_2, aes(x=date_time, y=output)) +
geom_line() +
ylab("Salzkonzentation") +
ggtitle("Durchgangskurve 3420_2")
ggsave("/Users/dabanto/Desktop/master/hydro_master/tracerhydro/eichstetten/p2.png", p2,  dpi = 300)
p2
p1 <- ggplot(multi3420_1, aes(x=date_time, y=output)) +
geom_line() +
ylab("Salzkonzentation") +
ggtitle("Durchgangskurve 3420_1")
p1
ggsave("/Users/dabanto/Desktop/master/hydro_master/tracerhydro/eichstetten/p1.png", p1,  dpi = 600)
p2 <- ggplot(multi3420_2, aes(x=date_time, y=output)) +
geom_line() +
ylab("Salzkonzentation") +
ggtitle("Durchgangskurve 3420_2")
ggsave("/Users/dabanto/Desktop/master/hydro_master/tracerhydro/eichstetten/p2.png", p2,  dpi = 600)
p2
p1 <- ggplot(multi3420_1, aes(x=date_time, y=output)) +
geom_line() +
ylab("Salzkonzentation") +
ggtitle("Durchgangskurve 3420_1")
p1
ggsave("/Users/dabanto/Desktop/master/hydro_master/tracerhydro/eichstetten/p1.png", p1,  dpi = 600)
p2 <- ggplot(multi3420_2, aes(x=date_time, y=output)) +
geom_line() +
ylab("Salzkonzentation") +
ggtitle("Durchgangskurve 3420_2")
ggsave("/Users/dabanto/Desktop/master/hydro_master/tracerhydro/eichstetten/p2.png", p2,  dpi = 600)
p2
#benötigte packages:
library(readr)
#install.packaes("hydroEvents")
library(hydroEvents)
#Dateneinlesen
abfluss <- read_csv("/Users/dabanto/Downloads/Landespegel.csv",locale = locale(decimal_mark = ",", encoding = "ASCII"),skip = 6)
prec <- read_table("/Users/dabanto/Downloads/N_07234.txt",skip=2)
#Datum formatieren
abfluss <- abfluss %>%
mutate(date = as.POSIXct(`Datum / Uhrzeit`, format= "%d/%m/%Y %H:%M"))
prec <- prec %>%
mutate(date = make_datetime(Jahr, Monat, Tag, Stunde))
#Merge, um beide Datensätze zu vereinien
workdat<-merge(abfluss,prec,by = "date")
workdat$Wert <- gsub(",", ".", workdat$Wert)
workdat$Wert <- as.numeric(workdat$Wert)#Ablusswerte müssen als Zahl gespeichert werden
workdat <- tibble::rowid_to_column(workdat, "ID")
workdat <- workdat %>%
select(ID, date, Stationsname, Parameter, Wert, N) #Überschüssige zeilen entfernen
names(workdat)[names(workdat) == "Wert"] <- "Abfluss"# Abfluss kennzeichnen
#Umrechnung der Abflusswerte von m3/s in mm/h (also die gleiche Auflösung wie der Niederschlagsdaten)
workdat$Abfluss <- workdat$Abfluss*1000*3600/62805000 #*3600 um von Sekundenwerte auf Stundenwerte,*1000 um von m3 auf Liter,/die Einzugsgebietsgröße in m2
#Abflusskoeffizient über alle Jahre
RFC_gesmean<-sum(workdat$Abfluss)/sum(workdat$N)
RFC_monate <- numeric()
# Iteriere durch jeden Monat
for (monat in 1:12) {
# Extrahiere Daten für den aktuellen Monat
daten_monat <- workdat %>%
filter(format(date, "%m") == sprintf("%02d", monat))
# Berechne RFC für den Monat und speichere das Ergebnis
RFC_monate[monat] <- sum(daten_monat$Abfluss) / sum(daten_monat$N)
}
RFC_monate
#Direktabflusskoeffizient über alle Jahre
#hierfür muss zunächst der baseflow berechnet werden
#hydroEvents liefert 2 Funktionen die den Baseflow mithilfe vom Parametern α variabel abtrennt
#α sollte für jedes Einzugsgebiet visuell bestimmt werden
#häufig befinden sich die Werte für alpha in einer Range von 0.9 und 1
workdat$bf.a.975<- baseflowA(workdat$Abfluss,alpha=0.975)$bf
workdat$bf.a.925<- baseflowA(workdat$Abfluss,alpha=0.925)$bf
workdat$bf.b.975<- baseflowB(workdat$Abfluss,alpha=0.975)$bf
workdat$bf.b.925<- baseflowB(workdat$Abfluss,alpha=0.925)$bf
#Direktabfluss(qf) durch Subtraktion des Basisabfluss vom Gesamtabfluss berechnen
workdat$qf.a.975<- workdat$Abfluss-workdat$bf.a.975
workdat$qf.a.925<- workdat$Abfluss-workdat$bf.a.925
workdat$qf.b.975<- workdat$Abfluss-workdat$bf.b.975
workdat$qf.b.925<- workdat$Abfluss-workdat$bf.b.925
#mit Baseflow A (alpha=0.975) für jeden Monat
RFC_direct_a_975_monate <- numeric()
for (monat in 1:12) {
# Extrahiere Daten für den aktuellen Monat
daten_monat <- workdat %>%
filter(format(date, "%m") == sprintf("%02d", monat))
# Berechne RFC für den Monat und speichere das Ergebnis
RFC_direct_a_975_monate[monat] <- sum(daten_monat$qf.a.975) / sum(daten_monat$N)
}
RFC_direct_a_975_monate
#mit Baseflow A (alpha=0.925) für jeden Monat
RFC_direct_a_925_monate <- numeric()
for (monat in 1:12) {
# Extrahiere Daten für den aktuellen Monat
daten_monat <- workdat %>%
filter(format(date, "%m") == sprintf("%02d", monat))
# Berechne RFC für den Monat und speichere das Ergebnis
RFC_direct_a_925_monate[monat] <- sum(daten_monat$qf.a.925) / sum(daten_monat$N)
}
RFC_direct_a_925_monate
#mit Baseflow b (alpha=0.975) für jeden Monat
RFC_direct_b_975_monate <- numeric()
for (monat in 1:12) {
# Extrahiere Daten für den aktuellen Monat
daten_monat <- workdat %>%
filter(format(date, "%m") == sprintf("%02d", monat))
# Berechne RFC für den Monat und speichere das Ergebnis
RFC_direct_b_975_monate[monat] <- sum(daten_monat$qf.b.975) / sum(daten_monat$N)
}
RFC_direct_b_975_monate
#mit Baseflow b (alpha=0.975) für jeden Monat
RFC_direct_b_925_monate <- numeric()
for (monat in 1:12) {
# Extrahiere Daten für den aktuellen Monat
daten_monat <- workdat %>%
filter(format(date, "%m") == sprintf("%02d", monat))
# Berechne RFC für den Monat und speichere das Ergebnis
RFC_direct_b_925_monate[monat] <- sum(daten_monat$qf.b.925) / sum(daten_monat$N)
}
RFC_direct_b_925_monate
#Erstellen des Zieldatensatzes mit Abflusskoeffizient und Direktabflusskoeffizient
RFC <- data.frame(
Monat = seq(1:12),
RFC_ges = RFC_monate,
RFC_direct_a_975 = RFC_direct_a_975_monate,
RFC_direct_a_925 = RFC_direct_a_925_monate,
RFC_direct_b_975 =RFC_direct_b_975_monate,
RFC_direct_b_925 =RFC_direct_b_925_monate
)
#Darstellen des Jahresgangs des Abflusskoeffizienten
par(mar=c(5.1, 4.1, 4.1, 2.1),mfcol=c(1,1),mfrow=c(1,1))
plot(RFC$RFC_ges,type="l",ylim=c(0,1.5),ylab = "Abflusskoeffizient",xlab="Monate",main="Jahresgang der Abflusskoeffizienten je Monat")
lines(RFC$RFC_direct_a_975,col="blue")
lines(RFC$RFC_direct_a_925,col="darkblue")
lines(RFC$RFC_direct_b_975,col="green")
lines(RFC$RFC_direct_b_925,col="darkgreen")
#Mittelwerte berechnen und plotten
RFC_directmean_a_975<-mean(RFC$RFC_direct_a_975)
RFC_directmean_a_925<-mean(RFC$RFC_direct_a_925)
RFC_directmean_b_975<-mean(RFC$RFC_direct_b_975)
RFC_directmean_b_925<-mean(RFC$RFC_direct_b_925)
abline(h = RFC_gesmean, col = "black", lty = 2)
abline(h=RFC_directmean_a_975,col="blue",lty=2)
abline(h=RFC_directmean_a_925,col="darkblue",lty=2)
abline(h=RFC_directmean_b_975,col="green",lty=2)
abline(h=RFC_directmean_b_925,col="darkgreen",lty=2)
legend("topright", lty = c(1, 2, 1, 2,1,2,1,2,1,2), col = c("black", "black", "blue", "blue","darkblue","darkblue","green","green","darkgreen","darkgreen"), cex = 0.8, bty = "n",
legend = c("RFC_ges","mean(RFC_ges)","RFC_direct_a_975","mean(RFC_direct_a_975)","RFC_direct_a_925","mean(RFC_direct_a_925)","RFC_direct_b_975","mean(RFC_direct_b_975)","RFC_direct_b_925","mean(RFC_direct_b_925)"))
